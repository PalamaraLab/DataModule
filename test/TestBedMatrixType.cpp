// This file is part of https://github.com/PalamaraLab/DataModule which is released under the GPL-3.0 license.
// See accompanying LICENSE and COPYING for copyright notice and full details.

#include "BedMatrixType.hpp"

#include <catch2/catch.hpp>

#include <cstdint>
#include <string>

#include <fmt/core.h>
#include <fmt/ostream.h>
#include <fmt/ranges.h>

namespace asmc {

TEST_CASE("BedMatrixType: test (small) real example", "[BedMatrixType]") {

  // Simulated data generated by plink, with fraction 0.05 missing data, 50 individuals, 100 SNPs
  std::string bedFile = DATA_MODULE_TEST_DIR "/data/bedbimfam/real_example.bed";
  std::string bimFile = DATA_MODULE_TEST_DIR "/data/bedbimfam/real_example.bim";
  std::string famFile = DATA_MODULE_TEST_DIR "/data/bedbimfam/real_example.fam";

  auto bedMatrix = BedMatrixType::createFromBedBimFam(bedFile, bimFile, famFile);

  // Test getting basic information
  {
    CHECK(bedMatrix.getData().rows() == static_cast<index_t>(50l));
    CHECK(bedMatrix.getData().cols() == static_cast<index_t>(100l));
    CHECK(bedMatrix.getNumIndividuals() == 50ul);
    CHECK(bedMatrix.getNumSites() == 100ul);

    const auto& physicalPositions = bedMatrix.getPhysicalPositions();
    CHECK(physicalPositions.size() == 100ul);
    for (unsigned long i = 0ul; i < physicalPositions.size(); ++i) {
      CHECK(physicalPositions.at(i) == i + 1ul);
    }

    const auto& geneticPositions = bedMatrix.getGeneticPositions();
    CHECK(geneticPositions.size() == 100ul);
    for (auto genPos : geneticPositions) {
      CHECK(genPos == 0.0);
    }

    const auto& siteNames = bedMatrix.getSiteNames();
    CHECK(siteNames.size() == 100ul);
    CHECK(siteNames.at(67ul) == "null_67");
  }

  //  auto
}

} // namespace asmc
